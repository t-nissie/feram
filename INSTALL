=begin
= How to compile feram
This document describes how to compile feram for your computers.
Version and date of installation is written in parentheses ().

== Requirements
 * GNU make  http://www.gnu.org/software/make/ (You cannot use *BSD make.)
 * FFTW3 library  http://www.fftw.org/ (For Intel and AMD machines.
   version 3.3 or higher. Configure FFTW3 library with options of
   --enable-openmp --enable-threads --enable-sse2.
   --enable-avx and --enable-shared are also useful additional configure options.
   Intel MKL contains FFTW3 wrappers.)
 * BLAS and LAPACK libraries (You do NOT have to used optimized BLAS,
   because LAPACK subroutines are not used in crucial parts of feram.)
 * Fortran 90 compiler
   * gfortran coming with GCC-4.2.2 or higher  http://gcc.gnu.org/
   * Intel Fortran Compiler (ifort; version 11.1 and later) with
     Intel Math Kernel Library (MKL; version 10.2 and later)
     http://software.intel.com/en-us/articles/intel-compilers/
   * Fortran 90 for HITACHI SR16000
   * Fortran 90 (frtpx) for Fujitsu supercomputers: Kei and FX10
 * tar (version 1.22 or higher)  http://www.gnu.org/software/tar/
 * xz  http://tukaani.org/xz/

== Useful software
These software are useful for executing feram and analyzing calculated results.
 * gnuplot (version 4.2 or higher)
 * Ruby (version 1.8.6 or higher)
 * jot (Every Linux distributions are presenting jot packages. Or, find its source athena-jot_9.0.orig.tar.gz in the Net.)

== Requirements for developing feram
 * autoconf (version 2.64 or higher)
 * automake (version 1.11.1 higher)

== Quick compilation
If you have all the required libraries,
follow this quick compilation instruction.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir Linux-i686-gfortran-4.3.5
 $ cd Linux-i686-gfortran-4.3.5
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL. mpif90 is required.
 $ make check       # OPTIONAL. Test RNG and FFT.
 $ ls -l feram*
 $ cp -r ../../src/11example-BaTiO3-new-hysteresis-loop .
 $ cd 11example-BaTiO3-new-hysteresis-loop
 $ ../feram hysteresis_d0.feram &         # test run
 $ ../feram hysteresis_d1_backwrd.feram & # 1day/1file
 $ ../feram hysteresis_d1_forward.feram &
 $ ../feram hysteresis_d2.feram &
 $ gnuplot all.gp  # plot a hysteresis loop
 $ gv all.eps      # preview

If you installed FFTW3 into your home directory,
specify CPPFLAGS and LDFLAGS for configure.
 $ ../configure FC=gfortran CPPFLAGS=-I/home/takeshi/include LDFLAGS=-L/home/takeshi/lib

== Linux
=== CentOS 6.2 (feram-0.18.05, 2012-03-28)
CentOS 6.2 can be installed to your x86_64 system with DVD and
CD-ROM images in http://isoredirect.centos.org/centos/6/isos/x86_64/ .

Network installation is also available with a CD-ROM image of
CentOS-6.2-x86_64-netinstall.iso. See
http://www.if-not-true-then-false.com/2011/centos-6-netinstall-network-installation/
for more details.

Select "Software Development Workstation" in the setup.

==== check the version of gfortran
 $ gfortran --version
 GNU Fortran (GCC) 4.4.6 ...

==== install fftw-3.3.1.tar.gz
 $ tar zxf fftw-3.3.1.tar.gz
 $ cd fftw-3.3.1
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-openmp --enable-threads --enable-sse2 --enable-avx --enable-shared
 $ emacs tools/Makefile   # Edit LIBFFTWTHREADS to link libfftw3_omp, not libfftw3_threads.
 $ make
 $ make check
 $ su
 # make install
 # exit

==== install BLAS and LAPACK
 $ su
 # yum install blas.x86_64 lapack.x86_64
 # cd /usr/lib64
 # ln -s libblas.so.3 libblas.so
 # ln -s liblapack.so.3 liblapack.so
 # exit
Symbolic links are for avoiding error of "/usr/bin/ld: cannot find -lblas".
See http://linuxtoolkit.blogspot.jp/2011/11/cannot-find-llapack-when-doing-usrbinld.html for more details.

==== compile feram
 $ export LD_LIBRARY_PATH=/usr/local/lib64   # Do not forget it.
 $ tar xf feram-0.18.05.tar.xz
 $ cd feram-0.18.05
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make
 $ ls -l feram
 $ ldd feram

=== Linux with Intel Fortran Compiler and FFTW wrappers in Intel MKL
 $ . /opt/intel/bin/ifortvars.sh intel64     # Put these two lines in your
 $ . /opt/intel/mkl/bin/mklvars.sh intel64   # ~/.bashrc or somewhere.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-11.1
 $ cd ifort-11.1
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS="-I$MKLROOT/include/fftw" --with-fft=mkl --with-lapack=mkl
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL


== Super computers
=== HITACHI SR16000 with f90 (OFORT90), FFT in MATRIX/MPP and LAPACK
Note that libblas.a, liblapack.a, and libmatmpp.a must be in
/sysap/lib/, /opt/hitachi/matmpp/lib/ or elsewhere.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir SR16000-f90
 $ cd SR16000-f90
 $ ../configure FC=f90 LDFLAGS='-L/sysap/lib -L/opt/hitachi/matmpp/lib' --with-fft=matmpp
 $ cd src
 $ make
For performance monitor
 $ ../configure FC=f90 LDFLAGS='-L/sysap/lib -L/opt/hitachi/matmpp/lib' FCFLAGS='-64 -Os -parallel=4 -uinline=2 -mathinline -COMOUT \
   -exclamation=option -precise -model=M1 -noscope -nolimit -noprefetch -prefetch_zero -loglist -i,L -pmfunc -pmpar'
Currently, feram runs on 1/4 node of SR16000 effectively.
Therefore,
 $ cat SC
 ../feram forward.feram
 $ submit SC general -pt 16 -exec SC -J SC -N -u t-nissie@example.com
is the most efficient way of queue submission on SR16000, so far.


=== HITACHI SR16000 with f90 (OFORT90), fftw-3.3.2 and LAPACK
 $ ../configure FC=f90 LDFLAGS='-L/sysap/lib -L/sysap/fftw/fftw-3.3.2a/lib -lm' CPPFLAGS=-I/sysap/fftw/fftw-3.3.2a/include --with-fft=fftw3_omp

=== HITACHI SR16000 with IBM xlf90_r, FFTW 3.3 and dsyevx in ESSL (libesslsmp)
Note that ESSL does not have dsyev but dsyevx.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir SR16000-xlf
 $ cd SR16000-xlf
 $ ../configure FC=xlf90_r CPPFLAGS=-I/home/t-nissie/AIX/include LDFLAGS=-L/home/t-nissie/AIX/lib --with-lapack=essl
 $ cd src
 $ grep -v cppoptions /etc/xlf.cfg.71 > myxlf.cfg   # Enable C-like comments
 $ emacs Makefile   # DEFS = -DHAVE_CONFIG_H  =>  DEFS = -WF,-DHAVE_CONFIG_H -Fmyxlf.cfg
 $ make fft_check
 $ OMP_NUM_THREADS=8 ./fft_check 1000 32 32 32

=== Fujitsu FX1
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir FX1
 $ cd FX1
 $ ../configure FC=frt --with-fft=ssl2 --with-lapack=ssl2
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL

=== Fujitsu Kei and FX10 with their cross compiler frtpx and mpifrtpx
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir Kei
 $ cd Kei
 $ ../configure FC=frtpx --with-fft=ssl2 --with-lapack=ssl2 --host=Kei   # use --host=FX10 for FX10
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL

If you want to link FFTW 3.3 rather than FFT in SSL II,
 $ ../configure FC=frtpx LDFLAGS=-L/home2/apps/fftw/3.3/lib64 CPPFLAGS=-I/home2/apps/fftw/3.3/include --with-fft=fftw3 --with-lapack=ssl2 --host=Kei
 $ ../configure FC=frtpx LDFLAGS=-L/usr/local/fftw/3.3/lib64  CPPFLAGS=-I/usr/local/fftw/3.3/include  --with-fft=fftw3 --with-lapack=ssl2 --host=FX10

== Windows
=== MinGW

== Mac OS X

=end
# Local variables:
#   mode: RD
#   compile-command: "make INSTALL.html"
# End:
