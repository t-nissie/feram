=begin
= How to compile feram
This document describes how to compile feram for your computers.
Version and date of installation is written in parentheses ().

== Requirements
 * GNU make  http://www.gnu.org/software/make/
 * FFTW3 library  http://www.fftw.org/ (For Intel and AMD machines.
   version 3.3 or higher. Configure FFTW3 library with options of
   --enable-openmp --enable-threads --enable-sse2.
   --enable-avx and --enable-shared are also useful additional configure options.
   Intel MKL contains FFTW3 wrappers.)
 * Linear algebra library
   * ATLAS (Automatically Tuned Linear Algebra Software)
   * BLAS and LAPACK libraries
 * Fortran 90 compiler
   * gfortran coming with GCC-4.2.2 or higher  http://gcc.gnu.org/
   * Intel Fortran Compiler (ifort; version 11.1 and later) with
     Intel Math Kernel Library (MKL; version 10.2 and later)
     http://software.intel.com/en-us/articles/intel-compilers/
   * IBM XL Fortran for HITACHI SR16000
   * Fortran 90 (frtpx) for Fujitsu supercomputers: Kei and FX10
 * xz (data compression software)  http://tukaani.org/xz/
Modern Linux distributions (Debian, Ubuntu, RedHat, CentOS, etc.) have their
packages of these software required to compile feram. Check their versions
with --version option, e.g. make --version, or install them with package
managers (apt-get, yum, etc.).

== Useful software
These software are useful for executing feram and analyzing calculated results.
 * gnuplot (version 4.6 or higher)  http://www.gnuplot.info/
 * Ruby (version 1.8.6 or higher)  http://www.ruby-lang.org/
 * jot (Every Linux distributions are presenting jot packages. Or, find its source athena-jot_9.0.orig.tar.gz in the Net.)
 * epstopdf.pl http://www.ctan.org/pkg/epstopdf
   ftp://ctan.tug.org/tex-archive/support/epstopdf/epstopdf.pl
 * tar (version 1.22 or higher)  http://www.gnu.org/software/tar/
 * gifsicle http://www.lcdf.org/gifsicle/ (For animation)

== Requirements for developing feram
 * autoconf (version 2.69 or higher)    http://www.gnu.org/software/autoconf/
 * automake (version 1.14.1 or higher)  http://www.gnu.org/software/automake/

== Quick compilation
If you have all the required libraries,
follow this quick compilation instruction.
 $ tar xf feram-X.YY.ZZ.tar.xz   # If you do not have the latest tar(1),
                                 # $ xz -cd feram-X.YY.ZZ.tar.xz | tar xf -
 $ cd feram-X.YY.ZZ
 $ mkdir Linux-i686-gfortran-4.3.5
 $ cd Linux-i686-gfortran-4.3.5
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi   # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram*
 $ cp -r ../../src/11example-BaTiO3-new-hysteresis-loop .
 $ cd 11example-BaTiO3-new-hysteresis-loop
 $ ../feram hysteresis_d0.feram &         # test run
 $ ../feram hysteresis_d1_backwrd.feram & # 1day/1file
 $ ../feram hysteresis_d1_forward.feram &
 $ ../feram hysteresis_d2.feram &
 $ gnuplot all.gp  # plot a hysteresis loop
 $ gv all.eps      # preview

If you installed FFTW3 into your home directory,
specify CPPFLAGS and LDFLAGS for configure.
 $ ../configure FC=gfortran CPPFLAGS=-I/home/takeshi/include LDFLAGS=-L/home/takeshi/lib

== Linux
=== Debian 7.x and Ubuntu 12.10, 13.04, 13.10 and 14.04 LTS (feram-0.22.05, 2014-10-21)
FFTW3, ATLAS libraries and GNU Fortran (gfortran) can be easily
installed into Debian 7.x (Wheezy) GNU/Linux systems or Ubuntu systems
with apt-get(8) command. See http://www.ubuntu.com or http://www.debian.org .
==== install required packages
 $ sudo apt-get install libatlas-base-dev gfortran libfftw3-dev athena-jot
 $ sudo apt-get --purge remove liblapack-dev liblapack3 liblapack3gf
==== compile feram
 $ tar xf feram-0.22.05.tar.xz
 $ mkdir feram-0.22.05/build-with-gfortran
 $ cd feram-0.22.05/build-with-gfortran
 $ ../configure && make -j --max-load=10.0
 $ make check   # OPTIONAL. It takes 2 hours.

=== Fedora 21 (feram-0.22.05, 2014-11-05)
FFTW3, BLAS and LAPACK libraries and GNU Fortran (gfortran) can be easily
installed into Fedora systems with yum(8) command. See http://fedoraproject.org .
==== install required packages
 # yum install gcc gcc-gfortran
 # yum install fftw-devel blas-devel lapack-devel gnuplot csh
 # yum install autoconf.noarch automake.noarch libtool subversion   # For developers
==== compile feram
 $ tar xf feram-0.22.05.tar.xz
 $ mkdir feram-0.22.05/fedora21
 $ cd feram-0.22.05/fedora21
 $ ../configure && make -j --max-load=10.0
 $ make check   # OPTIONAL. It takes 2 hours.

=== CentOS 6.2 (feram-0.18.05, 2012-03-28)
CentOS 6.2 can be installed to your x86_64 system with DVD and
CD-ROM images in http://isoredirect.centos.org/centos/6/isos/x86_64/ .

Network installation is also available with a CD-ROM image of
CentOS-6.2-x86_64-netinstall.iso. See
http://www.if-not-true-then-false.com/2011/centos-6-netinstall-network-installation/
for more details.

Select "Software Development Workstation" in the setup.

==== check the version of gfortran
 $ gfortran --version
 GNU Fortran (GCC) 4.4.6 ...

==== install fftw-3.3.1.tar.gz
 $ tar zxf fftw-3.3.1.tar.gz
 $ cd fftw-3.3.1
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-openmp --enable-threads --enable-sse2 --enable-avx --enable-shared
 $ emacs tools/Makefile   # Edit LIBFFTWTHREADS to link libfftw3_omp, not libfftw3_threads.
 $ make -j --max-load=10.0
 $ make check
 $ su
 # make install
 # exit

==== install BLAS and LAPACK
 $ su
 # yum install blas-devel lapack-devel
 # exit

==== compile feram
 $ export LD_LIBRARY_PATH=/usr/local/lib64   # Do not forget it.
 $ tar xf feram-0.18.05.tar.xz
 $ cd feram-0.18.05
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ OMP_NUM_THREADS=6  make check   # OPTIONAL. It takes 2 hours.
 $ OMP_NUM_THREADS=12 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram
 $ ldd feram

=== Slackware64 14.1 (feram-0.22.00, 2014-01-20)
==== install BLAS and LAPACK
Download blas-20110419-x86_64-1_uqv.txz and lapack-3.4.1-x86_64-1_uqv.txz
from http://www.vislab.uq.edu.au/slackware64/14.1/ and install them.
 $ wget http://www.vislab.uq.edu.au/slackware64/14.1/blas-20110419-x86_64-1_uqv.txz
 $ wget http://www.vislab.uq.edu.au/slackware64/14.1/lapack-3.4.1-x86_64-1_uqv.txz
 $ su
 $ installpkg blas-20110419-x86_64-1_uqv.txz
 $ installpkg lapack-3.4.1-x86_64-1_uqv.txz

==== install fftw-3.3.4.tar.gz
 $ wget http://www.fftw.org/fftw-3.3.4.tar.gz
 $ tar xf fftw-3.3.4.tar.gz
 $ cd fftw-3.3.4
 $ mkdir Slackware
 $ cd Slackware
 $ ../configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-openmp --enable-threads --enable-sse2 --enable-avx --enable-mpi --enable-shared
 $ emacs tools/Makefile   # Edit LIBFFTWTHREADS to link libfftw3_omp, not libfftw3_threads.
 $ make -j --max-load=10.0
 $ make check
 $ su
 # make install
 # ldconfig
 # exit

==== compile feram
 $ export LD_LIBRARY_PATH=/usr/local/lib64   # Do not forget it.
 $ tar xf feram-0.22.00.tar.xz
 $ cd feram-0.22.00
 $ mkdir Slackware
 $ cd Slackware
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ OMP_NUM_THREADS=6  make check   # OPTIONAL. It takes 2 hours.
 $ OMP_NUM_THREADS=12 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram
 $ ldd feram

=== Linux with Intel Fortran Compiler and FFTW wrappers in Intel MKL
 $ . /opt/intel/bin/ifortvars.sh intel64     # Put these two lines in your
 $ . /opt/intel/mkl/bin/mklvars.sh intel64   # ~/.bashrc or somewhere.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-11.1
 $ cd ifort-11.1
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS="-I$MKLROOT/include/fftw" --with-fft=mkl --with-lapack=mkl
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi                 # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. Test RNG and FFT.

=== Linux with Intel Fortran Compiler and FFTW library
Sometimes it is faster than MKL.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-12.1-FFTW
 $ cd ifort-12.1-FFTW
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS=-I/uhome/s21584/Linux-x86_64/include LDFLAGS=-L/uhome/s21584/Linux-x86_64/lib --with-fft=fftw3_omp --with-lapack=mkl
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi                 # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. It takes 2 hours.

=== Linux with OLD Intel Fortran Compiler and FFTW library (feram-0.21.04, 2013-10-08)
Old versions (around version 9.1) of ifort (Intel Fortran Compiler) does not
have FFTW wrappers. You should also edit src/Makefile for changing LIBS.

Configure options for fftw-3.3.4 are:
 $ ../configure --prefix=/users/takeshi/Linux-x86_64 --enable-openmp --enable-threads --enable-sse2 CC=icc F77=ifort FC=ifort

Compile feram as:
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-9.1-FFTW
 $ cd ifort-9.1-FFTW
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS=-I/users/takeshi/Linux-x86_64/include LDFLAGS="-L/nfs/apps/intel/mkl/9.0/lib/em64t -L/users/takeshi/Linux-x86_64/lib" --with-lapack=mkl
 $ emacs src/Makefile   # Edit LIBS as below diff
 $ diff -u src/Makefile~ src/Makefile
 --- src/Makefile~      2013-10-08 11:58:19.369218529 +0200
 +++ src/Makefile       2013-10-08 12:00:21.795094709 +0200
 @@ -477,7 +477,7 @@
  INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
  LDFLAGS = -L/nfs/apps/intel/mkl/9.0/lib/em64t -L/users/takeshi/Linux-x86_64/lib -L/usr/local/lib
  LIBOBJS = 
 -LIBS = -lfftw3_omp -lfftw3  -lmkl_core -lmkl_intel_thread -lmkl_gf_lp64
 +LIBS = -lfftw3_omp -lfftw3 -lmkl -lmkl_lapack
  LTLIBOBJS = 
  MAKEINFO = ${SHELL} /users/takeshi/f/loto/feram/trunk/missing makeinfo
  MKDIR_P = /bin/mkdir -p
 $ make -j --max-load=10.0


== Super computers
=== HITACHI SR16000 with IBM xlf90_r, FFTW 3.3 and dsyevx in ESSL (libesslsmp)
IBM XL Fortran (xlf90_r) version 13.1 or higher is required.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir SR16000-xlf
 $ cd SR16000-xlf
 $ xlf90_r -qversion   # Displays the official compiler product name and version information
 $ ../configure FC=xlf90_r CPPFLAGS=-I/sysap/fftw_xlc/fftw-3.3.2a/include LDFLAGS=-L/sysap/fftw_xlc/fftw-3.3.2a/lib --with-lapack=essl
 $ cd src
 $ grep -v cppoptions /etc/xlf.cfg.71 > myxlf.cfg   # Enable C-style comments
 $ emacs Makefile   # DEFS = -DHAVE_CONFIG_H  =>  DEFS = -WF,-DHAVE_CONFIG_H -Fmyxlf.cfg
 $ make -j10
 $ MALLOCMULTIHEAP=true XLSMPOPTS="spins=0:yields=0:parthds=32:stride=2:startproc=0" make check   # OPTIONAL. It takes 30 minutes.
 $ make feram_mpi   # OPTIONAL

=== Fujitsu Kei and FX10 with their cross compiler frtpx and mpifrtpx
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir Kei
 $ cd Kei
 $ ../configure FC=frtpx --with-fft=ssl2 --with-lapack=ssl2 --host=Kei   # use --host=FX10 for FX10
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL

If you want to link FFTW 3.3 rather than FFT in SSL II,
 $ ../configure FC=frtpx LDFLAGS=-L/home2/apps/fftw/3.3/lib64 CPPFLAGS=-I/home2/apps/fftw/3.3/include --with-fft=fftw3 --with-lapack=ssl2 --host=Kei
 $ ../configure FC=frtpx LDFLAGS=-L/usr/local/fftw/3.3/lib64  CPPFLAGS=-I/usr/local/fftw/3.3/include  --with-fft=fftw3 --with-lapack=ssl2 --host=FX10



== Windows
On Windows OS, you can use feram through Cygwin or MinGW.

=== Through Cygwin of gnupack (feram-0.22.06, 2015-01-05)
We install Cygwin with gnupack http://gnupack.sourceforge.jp/docs/latest/UsersGuide.html .
Then, we install gfortran, FFTW3 and LAPACK packages with apt-cyg command.
Then, we compile and execute feram.
==== Downlaod and install gnupack
Download a self-extracting archive gnupack_devel-12.00-2014.12.29.exe
from http://sourceforge.jp/projects/gnupack/releases/p10360
and extract it into C:/ .
==== Install gfortran, FFTW3 and LAPACK
You can start a UNIX-like terminal with the startup_cygwin.exe command,
and from the terminal you can install gfortran, FFTW3 and LAPACK.
 # cd
 # export LANG=C   # Put it in your .bashrc
 # apt-cyg update
 # apt-cyg install gcc4-fortran libfftw3-devel liblapack-devel
 # cp /usr/lib/lapack/cyg*.dll /usr/bin
 # gfortran --version
==== Compile feram
Now, let's compile and execute feram!
 # cd
 # mkdir -p f/feram
 # cd f/feram
 # wget http://sourceforge.net/projects/loto/files/feram/feram-0.22.06/feram-0.22.06.tar.xz
 # tar xf feram-0.22.06.tar.xz
 # cd feram-0.22.06
 # mkdir Cygwin
 # cd Cygwin
 # ../configure --with-fft=fftw3_threads
 # make -j4
 # objdump.exe -p src/feram.exe | head -n 12
 
 src/feram.exe:     file format pei-i386
 
 Characteristics 0x127
         relocations stripped
         executable
         line numbers stripped
         large address aware
         32 bit words
 
 Time/Date               Mon Jan  5 05:19:47 2015
 Magic                   010b    (PE32)
 # cd src
 # cp ../../src/elastocaloric770K_check.??.feram .
 # OMP_NUM_THREADS=4 ./feram.exe elastocaloric770K_check.vs.feram elastocaloric770K_check.lf.feram
 # make check   # This will be available from feram-0.22.07.

=== Through MinGW (feram-0.22.06, 2014-12-29)
We compile feram on Windows 8.1 with MinGW and TDM64-GCC.
==== Install MinGW
Check MinGW (Minimalist GNU for Windows) homepage http://www.mingw.org/ .
Download mingw-get-setup.exe from http://sourceforge.net/projects/mingw/files/Installer/ .
Execute mingw-get-setup.exe to install MinGW.
You do not have to install C and Fortran compilers here.
Select only "mingw-developer-toolkit".
You can also select msys-mintty, msys-wget, msys-upzip, msys-zip, etc.

Add "C:\MinGW\bin;" to the PATH environment variable by opening the System control panel,
going to the Advanced tab, and clicking the Environment Variables button.

Making a shortcut of
 c:\MinGW\msys\1.0\bin\mintty.exe /bin/bash --login -i
on your desktop may be useful.
You can do following compilations and installations on this mintty. 

To add more packages, you can double-click "MinGW Install", select new packages, then
apply changes. Or you can add packages with mingw-get:
 $ mingw-get update
 $ mingw-get upgrade
 $ mingw-get install msys-mintty msys-wget msys-zip msys-unzip

==== Install TDM64-GCC
Because gfortran and OpenMP (mingw32-pthreads-w32) in MinGW cannot
compile feram code correctly, we install and use TDM64-GCC.
Go to http://tdm-gcc.tdragon.net/ .
Download and execute tdm64-gcc-4.9.2-3.exe .
Mark "fortran" and "openmp" in the TDM-GCC Setup.
Make sure that "C:\TDM-GCC-64\bin;" is *before* "C:\MinGW\bin;" in the
PATH environment variable.
Check the version number of gfortran
 $ gfortran --version
 GNU Fortran (tdm64-1) 4.9.2
     :

==== Install FFTW
Referring to http://www.fftw.org/install/windows.html ,
you can compile and install FFTW library as:
 $ cd
 $ mkdir -p work/fftw
 $ cd work/fftw
 $ wget http://fftw.org/fftw-3.3.4.tar.gz
 $ tar xf fftw-3.3.4.tar.gz
 $ cd fftw-3.3.4
 $ mkdir MinGW
 $ cd MinGW
 $ ../configure --enable-threads --with-combined-threads --enable-sse2 --enable-avx --enable-shared --with-our-malloc16 --disable-static --with-windows-f77-mangling
 $ make   # Do not use the -j option.
 $ make install
 $ hash -r
 $ fftw-wisdom --version   # Check its version.
Note that installed /usr/local/bin/libfftw3-3.dll does not have the OpenMP library, but the threads library.
==== Install BLAS and LAPACK
 $ wget http://www.netlib.org/lapack/lapack-3.5.0.tgz
 $ tar xf lapack-3.5.0.tgz
 $ cd lapack-3.5.0
 $ cp make.inc.example make.inc
 $ cd BLAS/src
 $ make   # Do not use the -j option.
 $ cd ../..
 $ make   # Tests fail, but we do not care.
 $ cp liblapack.a /usr/local/lib/
 $ cp librefblas.a /usr/local/lib/libblas.a
==== Install feram
 $ wget http://sourceforge.net/projects/loto/files/feram/feram-0.22.06/feram-0.22.06.tar.xz
 $ tar xf feram-0.22.06.tar.xz
 $ cd feram-0.22.06
 $ mkdir MinGW
 $ cd MinGW
 $ ../configure LDFLAGS=-L/usr/local/lib --with-fft=fftw3_combined_threads
 $ make   # Do not use the -j option.
 $ objdump.exe -p src/feram.exe
 
 src/feram.exe:     file format pei-x86-64
 
 Characteristics 0x27
         relocations stripped
         executable
         line numbers stripped
         large address aware
 
 Time/Date               Sun Dec 28 17:45:01 2014
 Magic                   020b    (PE32+)
     :
 $ cd src
 $ cp ../../src/elastocaloric770K_check.??.feram .
 $ ./feram.exe elastocaloric770K_check.vs.feram elastocaloric770K_check.lf.feram   # Test.
==== GNU Autotools
The latest autoconf and automake are required for developers of feram.

 $ wget http://ring.tains.tohoku.ac.jp/pub/GNU/autoconf/autoconf-2.69.tar.xz
 $ tar xz autoconf-2.69.tar.xz
 $ cd autoconf-2.69
 $ mkdir MinGW
 $ cd MinGW
 $ ../configure
 $ make
 $ make install
 $ hash -r
 $ autoconf --version

 $ wget http://ring.tains.tohoku.ac.jp/pub/GNU/automake/automake-1.14.1.tar.xz
 $ tar xz automake-1.14.1.tar.xz
 $ cd automake-1.14.1
 $ mkdir MinGW
 $ cd MinGW
 $ ../configure
 $ make
 $ make install
 $ hash -r
 $ automake --version
==== Ruby, GNUPLOT and Ghostscript
Use good installers for Ruby, GNUPLOT and Ghostscript.
 * Ruby: http://rubyinstaller.org
 * GNUPLOT: gp466-win32-setup.exe in https://sourceforge.net/projects/gnuplot/files/
 * GhostScript: gs915w32.exe from http://www.ghostscript.com
 * You may have to modify epstopdf.pl for MinGW: http://www.ctan.org/pkg/epstopdf

== Mac OS X
You can easily compile the latest gfortran in GCC package
and then feram on Mac OS X with Xcode and its Command Line Tools.

=end
# Local variables:
#   mode: RD
#   compile-command: "make INSTALL.html"
# End:
