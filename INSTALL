=begin
= How to compile feram
This document describes how to compile feram for your computers.
Version and date of installation is written in parentheses ().

== Requirements
 * GNU make  http://www.gnu.org/software/make/
 * FFTW3 library  http://www.fftw.org/ (For Intel and AMD machines.
   version 3.3 or higher. Configure FFTW3 library with options of
   --enable-openmp --enable-threads --enable-sse2.
   --enable-avx and --enable-shared are also useful additional configure options.
   Intel MKL contains FFTW3 wrappers.)
 * BLAS and LAPACK libraries (You do NOT have to used optimized BLAS,
   because LAPACK subroutines are not used in crucial parts of feram.)
 * Fortran 90 compiler
   * gfortran coming with GCC-4.2.2 or higher  http://gcc.gnu.org/
   * Intel Fortran Compiler (ifort; version 11.1 and later) with
     Intel Math Kernel Library (MKL; version 10.2 and later)
     http://software.intel.com/en-us/articles/intel-compilers/
   * IBM XL Fortran for HITACHI SR16000
   * Fortran 90 (frtpx) for Fujitsu supercomputers: Kei and FX10
 * xz  http://tukaani.org/xz/
Modern Linux distributions (Debian, Ubuntu, RedHat, CentOS, etc.) have their
packages of these software required to compile feram. Check their versions
with --version option, e.g. make --version, or install them with package
managers (apt-get, yum, etc.).

== Useful software
These software are useful for executing feram and analyzing calculated results.
 * gnuplot (version 4.6 or higher)  http://www.gnuplot.info/
 * Ruby (version 1.8.6 or higher)  http://www.ruby-lang.org/
 * jot (Every Linux distributions are presenting jot packages. Or, find its source athena-jot_9.0.orig.tar.gz in the Net.)
 * epstopdf.pl http://www.ctan.org/pkg/epstopdf
   ftp://ctan.tug.org/tex-archive/support/epstopdf/epstopdf.pl
 * tar (version 1.22 or higher)  http://www.gnu.org/software/tar/
 * gifsicle http://www.lcdf.org/gifsicle/ (For animation)

== Requirements for developing feram
 * autoconf (version 2.69 or higher)    http://www.gnu.org/software/autoconf/
 * automake (version 1.14.1 or higher)  http://www.gnu.org/software/automake/

== Quick compilation
If you have all the required libraries,
follow this quick compilation instruction.
 $ tar xf feram-X.YY.ZZ.tar.xz   # If you do not have the latest tar(1),
                                 # $ xz -cd feram-X.YY.ZZ.tar.xz | tar xf -
 $ cd feram-X.YY.ZZ
 $ mkdir Linux-i686-gfortran-4.3.5
 $ cd Linux-i686-gfortran-4.3.5
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi   # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram*
 $ cp -r ../../src/11example-BaTiO3-new-hysteresis-loop .
 $ cd 11example-BaTiO3-new-hysteresis-loop
 $ ../feram hysteresis_d0.feram &         # test run
 $ ../feram hysteresis_d1_backwrd.feram & # 1day/1file
 $ ../feram hysteresis_d1_forward.feram &
 $ ../feram hysteresis_d2.feram &
 $ gnuplot all.gp  # plot a hysteresis loop
 $ gv all.eps      # preview

If you installed FFTW3 into your home directory,
specify CPPFLAGS and LDFLAGS for configure.
 $ ../configure FC=gfortran CPPFLAGS=-I/home/takeshi/include LDFLAGS=-L/home/takeshi/lib

== Linux
=== Debian 7.x and Ubuntu 12.10, 13.04, 13.10 and 14.04 LTS (feram-0.22.04, 2014-08-09)
FFTW3, BLAS and LAPACK libraries and GNU Fortran (gfortran) can be easily
installed into Debian 7.x (Wheezy) GNU/Linux systems or Ubuntu systems
with apt-get(8) command. See http://www.ubuntu.com or http://www.debian.org .
==== install required packages
 $ sudo apt-get install liblapack-dev libblas-dev gfortran libfftw3-dev athena-jot
==== compile feram
 $ tar xf feram-0.22.04.tar.xz
 $ mkdir feram-0.22.04/ubuntu-14.04
 $ cd feram-0.22.04/ubuntu-14.04
 $ ../configure && make -j --max-load=10.0
 $ make check   # OPTIONAL. It takes 2 hours.

=== Fedora 19 (feram-0.21.02, 2013-07-04)
FFTW3, BLAS and LAPACK libraries and GNU Fortran (gfortran) can be easily
installed into Fedora systems with yum(8) command. See http://fedoraproject.org .
==== install required packages
 # yum install gcc gcc-gfortran
 # yum install fftw-devel blas-devel lapack-devel gnuplot
 # yum install autoconf.noarch automake.noarch libtool subversion   # For developers
==== compile feram
 $ tar xf feram-0.21.02.tar.xz
 $ mkdir feram-0.21.02/fedora19
 $ cd feram-0.21.02/fedora19
 $ ../configure && make -j --max-load=10.0
 $ make check   # OPTIONAL. It takes 2 hours.

=== CentOS 6.2 (feram-0.18.05, 2012-03-28)
CentOS 6.2 can be installed to your x86_64 system with DVD and
CD-ROM images in http://isoredirect.centos.org/centos/6/isos/x86_64/ .

Network installation is also available with a CD-ROM image of
CentOS-6.2-x86_64-netinstall.iso. See
http://www.if-not-true-then-false.com/2011/centos-6-netinstall-network-installation/
for more details.

Select "Software Development Workstation" in the setup.

==== check the version of gfortran
 $ gfortran --version
 GNU Fortran (GCC) 4.4.6 ...

==== install fftw-3.3.1.tar.gz
 $ tar zxf fftw-3.3.1.tar.gz
 $ cd fftw-3.3.1
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-openmp --enable-threads --enable-sse2 --enable-avx --enable-shared
 $ emacs tools/Makefile   # Edit LIBFFTWTHREADS to link libfftw3_omp, not libfftw3_threads.
 $ make -j --max-load=10.0
 $ make check
 $ su
 # make install
 # exit

==== install BLAS and LAPACK
 $ su
 # yum install blas-devel lapack-devel
 # exit

==== compile feram
 $ export LD_LIBRARY_PATH=/usr/local/lib64   # Do not forget it.
 $ tar xf feram-0.18.05.tar.xz
 $ cd feram-0.18.05
 $ mkdir CentOS
 $ cd CentOS
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ OMP_NUM_THREADS=6  make check   # OPTIONAL. It takes 2 hours.
 $ OMP_NUM_THREADS=12 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram
 $ ldd feram

=== Slackware64 14.1 (feram-0.22.00, 2014-01-20)
==== install BLAS and LAPACK
Download blas-20110419-x86_64-1_uqv.txz and lapack-3.4.1-x86_64-1_uqv.txz
from http://www.vislab.uq.edu.au/slackware64/14.1/ and install them.
 $ wget http://www.vislab.uq.edu.au/slackware64/14.1/blas-20110419-x86_64-1_uqv.txz
 $ wget http://www.vislab.uq.edu.au/slackware64/14.1/lapack-3.4.1-x86_64-1_uqv.txz
 $ su
 $ installpkg blas-20110419-x86_64-1_uqv.txz
 $ installpkg lapack-3.4.1-x86_64-1_uqv.txz

==== install fftw-3.3.4.tar.gz
 $ wget http://www.fftw.org/fftw-3.3.4.tar.gz
 $ tar xf fftw-3.3.4.tar.gz
 $ cd fftw-3.3.4
 $ mkdir Slackware
 $ cd Slackware
 $ ../configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-openmp --enable-threads --enable-sse2 --enable-avx --enable-mpi --enable-shared
 $ emacs tools/Makefile   # Edit LIBFFTWTHREADS to link libfftw3_omp, not libfftw3_threads.
 $ make -j --max-load=10.0
 $ make check
 $ su
 # make install
 # ldconfig
 # exit

==== compile feram
 $ export LD_LIBRARY_PATH=/usr/local/lib64   # Do not forget it.
 $ tar xf feram-0.22.00.tar.xz
 $ cd feram-0.22.00
 $ mkdir Slackware
 $ cd Slackware
 $ ../configure --help
 $ ../configure
 $ cd src
 $ make -j --max-load=10.0
 $ OMP_NUM_THREADS=6  make check   # OPTIONAL. It takes 2 hours.
 $ OMP_NUM_THREADS=12 make check   # OPTIONAL. It takes 2 hours.
 $ ls -l feram
 $ ldd feram

=== Linux with Intel Fortran Compiler and FFTW wrappers in Intel MKL
 $ . /opt/intel/bin/ifortvars.sh intel64     # Put these two lines in your
 $ . /opt/intel/mkl/bin/mklvars.sh intel64   # ~/.bashrc or somewhere.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-11.1
 $ cd ifort-11.1
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS="-I$MKLROOT/include/fftw" --with-fft=mkl --with-lapack=mkl
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi                 # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. Test RNG and FFT.

=== Linux with Intel Fortran Compiler and FFTW library
Sometimes it is fater than MKL.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-12.1-FFTW
 $ cd ifort-12.1-FFTW
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS=-I/uhome/s21584/Linux-x86_64/include LDFLAGS=-L/uhome/s21584/Linux-x86_64/lib --with-fft=fftw3_omp --with-lapack=mkl
 $ cd src
 $ make -j --max-load=10.0
 $ make feram_mpi                 # OPTIONAL. mpif90 is required.
 $ OMP_NUM_THREADS=6 make check   # OPTIONAL. It takes 2 hours.

=== Linux with OLD Intel Fortran Compiler and FFTW library (feram-0.21.04, 2013-10-08)
Old versions (around version 9.1) of ifort (Intel Fortran Compiler) does not
have FFTW wrappers. You should also edit src/Makefile for changing LIBS.

Configure options for fftw-3.3.4 are:
 $ ../configure --prefix=/users/takeshi/Linux-x86_64 --enable-openmp --enable-threads --enable-sse2 CC=icc F77=ifort FC=ifort

Compile feram as:
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir ifort-9.1-FFTW
 $ cd ifort-9.1-FFTW
 $ ../configure --help
 $ ../configure FC=ifort CPPFLAGS=-I/users/takeshi/Linux-x86_64/include LDFLAGS="-L/nfs/apps/intel/mkl/9.0/lib/em64t -L/users/takeshi/Linux-x86_64/lib" --with-lapack=mkl
 $ emacs src/Makefile   # Edit LIBS as below diff
 $ diff -u src/Makefile~ src/Makefile
 --- src/Makefile~      2013-10-08 11:58:19.369218529 +0200
 +++ src/Makefile       2013-10-08 12:00:21.795094709 +0200
 @@ -477,7 +477,7 @@
  INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
  LDFLAGS = -L/nfs/apps/intel/mkl/9.0/lib/em64t -L/users/takeshi/Linux-x86_64/lib -L/usr/local/lib
  LIBOBJS = 
 -LIBS = -lfftw3_omp -lfftw3  -lmkl_core -lmkl_intel_thread -lmkl_gf_lp64
 +LIBS = -lfftw3_omp -lfftw3 -lmkl -lmkl_lapack
  LTLIBOBJS = 
  MAKEINFO = ${SHELL} /users/takeshi/f/loto/feram/trunk/missing makeinfo
  MKDIR_P = /bin/mkdir -p
 $ make -j --max-load=10.0


== Super computers
=== HITACHI SR16000 with IBM xlf90_r, FFTW 3.3 and dsyevx in ESSL (libesslsmp)
Note that ESSL does not have dsyev() and zheev().
You may be able to use dsyevx() instead of dsyev().
IBM XL Fortran (xlf90_r) version 13.1 or higher is required.
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir SR16000-xlf
 $ cd SR16000-xlf
 $ xlf90_r -qversion   # Displays the official compiler product name and version information
 $ ../configure FC=xlf90_r CPPFLAGS=-I/sysap/fftw_xlc/fftw-3.3.2a/include LDFLAGS=-L/sysap/fftw_xlc/fftw-3.3.2a/lib --with-lapack=essl
 $ cd src
 $ grep -v cppoptions /etc/xlf.cfg.71 > myxlf.cfg   # Enable C-style comments
 $ emacs Makefile   # DEFS = -DHAVE_CONFIG_H  =>  DEFS = -WF,-DHAVE_CONFIG_H -Fmyxlf.cfg
 $ make -j10
 $ MALLOCMULTIHEAP=true XLSMPOPTS="spins=0:yields=0:parthds=32:stride=2:startproc=0" make check   # OPTIONAL. It takes 30 minutes.
 $ make feram_mpi   # OPTIONAL

=== Fujitsu Kei and FX10 with their cross compiler frtpx and mpifrtpx
 $ tar xf feram-X.YY.ZZ.tar.xz
 $ cd feram-X.YY.ZZ
 $ mkdir Kei
 $ cd Kei
 $ ../configure FC=frtpx --with-fft=ssl2 --with-lapack=ssl2 --host=Kei   # use --host=FX10 for FX10
 $ cd src
 $ make
 $ make feram_mpi   # OPTIONAL

If you want to link FFTW 3.3 rather than FFT in SSL II,
 $ ../configure FC=frtpx LDFLAGS=-L/home2/apps/fftw/3.3/lib64 CPPFLAGS=-I/home2/apps/fftw/3.3/include --with-fft=fftw3 --with-lapack=ssl2 --host=Kei
 $ ../configure FC=frtpx LDFLAGS=-L/usr/local/fftw/3.3/lib64  CPPFLAGS=-I/usr/local/fftw/3.3/include  --with-fft=fftw3 --with-lapack=ssl2 --host=FX10


== Windows
=== MinGW


== Mac OS X
You can compile feram on Mac OS X with Xcode and its Command Line Tools.

=end
# Local variables:
#   mode: RD
#   compile-command: "make INSTALL.html"
# End:
