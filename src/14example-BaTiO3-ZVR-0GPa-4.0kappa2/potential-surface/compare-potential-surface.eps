%!PS-Adobe-2.0
%%Title: compare-potential-surface.eps
%%Creator: gnuplot 4.2 patchlevel 3 
%%CreationDate: Fri Mar 27 00:44:58 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 410 554 770
%%Orientation: Portrait
%%Pages: (atend)
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following 6 true/false flags may be edited by hand if required
% The unit line width may also be changed
%
/Color true def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/TransparentPatterns false def
/gnulinewidth 10.000 def
/userlinewidth gnulinewidth def
%
/vshift -66 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (compare-potential-surface.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.2 patchlevel 3 )
  /Author (西松 毅)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Fri Mar 27 00:44:58 2009)
  /DOCINFO pdfmark
end
} ifelse
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
currentdict /CharStrings known {
	CharStrings /Idieresis known {
		/Encoding ISOLatin1Encoding def } if
} if
currentdict end definefont
} def
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
%
% Gnuplot Prolog Version 4.2 (August 2006)
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get stringwidth pop add} {pop} ifelse} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
/Times-Roman reencodeISO def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
0 setgray
newpath
(Times-Roman) findfont 200 scalefont setfont
1.000 UL
LTb
1140 4400 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 4400 M
[ [(Times-Roman) 200.0 0.0 true true 0 (-0.10)]
] -66.7 MRshow
1.000 UL
LTb
1140 4912 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 4912 M
[ [(Times-Roman) 200.0 0.0 true true 0 (-0.05)]
] -66.7 MRshow
1.000 UL
LTb
1140 5424 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 5424 M
[ [(Times-Roman) 200.0 0.0 true true 0 (0.00)]
] -66.7 MRshow
1.000 UL
LTb
1140 5936 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 5936 M
[ [(Times-Roman) 200.0 0.0 true true 0 (0.05)]
] -66.7 MRshow
1.000 UL
LTb
1140 6448 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 6448 M
[ [(Times-Roman) 200.0 0.0 true true 0 (0.10)]
] -66.7 MRshow
1.000 UL
LTb
1140 6960 M
63 0 V
3497 0 R
-63 0 V
stroke
1020 6960 M
[ [(Times-Roman) 200.0 0.0 true true 0 (0.15)]
] -66.7 MRshow
1.000 UL
LTb
1140 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
1140 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0)]
] -66.7 MCshow
1.000 UL
LTb
1733 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
1733 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.05)]
] -66.7 MCshow
1.000 UL
LTb
2327 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
2327 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.1)]
] -66.7 MCshow
1.000 UL
LTb
2920 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
2920 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.15)]
] -66.7 MCshow
1.000 UL
LTb
3513 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
3513 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.2)]
] -66.7 MCshow
1.000 UL
LTb
4107 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
4107 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.25)]
] -66.7 MCshow
1.000 UL
LTb
4700 4400 M
0 63 V
0 2497 R
0 -63 V
stroke
4700 4200 M
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.3)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
1140 6960 N
0 -2560 V
3560 0 V
0 2560 V
-3560 0 V
Z stroke
LCb setrgbcolor
200 5680 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ /Times-Italic reencodeISO def
[(Times-Italic) 200.0 0.0 true true 0 (E)]
[(Times-Roman) 160.0 -60.0 true true 0 (tot)]
[(Times-Roman) 200.0 0.0 true true 0 (-)]
[(Times-Italic) 200.0 0.0 true true 0 (E)]
[(Times-Roman) 160.0 -60.0 true true 0 (0)]
[(Times-Roman) 200.0 0.0 true true 0 ( [eV])]
] -46.7 MCshow
grestore
LTb
LCb setrgbcolor
2920 3900 M
[ [(Times-Italic) 200.0 0.0 true true 0 (u)]
[(Times-Roman) 200.0 0.0 true true 0 ( = sqrt\()]
[(Times-Italic) 200.0 0.0 true true 0 (u)]
XYsave
[(Times-Italic) 160.0 -60.0 true true 0 (x)]
XYrestore
[(Times-Roman) 160.0 100.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 (+)]
[(Times-Italic) 200.0 0.0 true true 0 (u)]
XYsave
[(Times-Italic) 160.0 -60.0 true true 0 (y)]
XYrestore
[(Times-Roman) 160.0 100.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 (+)]
[(Times-Italic) 200.0 0.0 true true 0 (u)]
XYsave
[(Times-Italic) 160.0 -60.0 true true 0 (z)]
XYrestore
[(Times-Roman) 160.0 100.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 (\) [\305])]
] -66.7 MCshow
LTb
1.000 UP
1.000 UL
LTb
1.000 UP
2.000 UL
LT3
LTb
2612 6758 M
[ /Symbol reencodeISO def
[(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 5.5, [001])]
] -46.7 MRshow
LT3
2732 6758 M
543 0 V
1140 5424 M
119 -2 V
118 -5 V
119 -9 V
119 -12 V
118 -14 V
119 -16 V
119 -16 V
118 -17 V
119 -16 V
119 -13 V
118 -10 V
119 -4 V
119 3 V
118 12 V
119 23 V
119 36 V
118 51 V
119 70 V
119 89 V
118 113 V
119 140 V
119 168 V
118 201 V
119 236 V
119 276 V
93 252 V
1140 5424 Pls
1259 5422 Pls
1377 5417 Pls
1496 5408 Pls
1615 5396 Pls
1733 5382 Pls
1852 5366 Pls
1971 5350 Pls
2089 5333 Pls
2208 5317 Pls
2327 5304 Pls
2445 5294 Pls
2564 5290 Pls
2683 5293 Pls
2801 5305 Pls
2920 5328 Pls
3039 5364 Pls
3157 5415 Pls
3276 5485 Pls
3395 5574 Pls
3513 5687 Pls
3632 5827 Pls
3751 5995 Pls
3869 6196 Pls
3988 6432 Pls
4107 6708 Pls
3003 6758 Pls
1.000 UP
2.000 UL
LT3
LTb
2612 6558 M
[ [(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 5.5, [110])]
] -46.7 MRshow
LT3
2732 6558 M
543 0 V
1140 5424 M
168 -4 V
168 -10 V
167 -17 V
168 -22 V
168 -26 V
168 -27 V
168 -26 V
168 -21 V
167 -13 V
168 -2 V
168 14 V
168 36 V
168 63 V
167 95 V
168 135 V
168 180 V
168 233 V
168 294 V
168 364 V
110 290 V
1140 5424 Crs
1308 5420 Crs
1476 5410 Crs
1643 5393 Crs
1811 5371 Crs
1979 5345 Crs
2147 5318 Crs
2315 5292 Crs
2483 5271 Crs
2650 5258 Crs
2818 5256 Crs
2986 5270 Crs
3154 5306 Crs
3322 5369 Crs
3489 5464 Crs
3657 5599 Crs
3825 5779 Crs
3993 6012 Crs
4161 6306 Crs
4329 6670 Crs
3003 6558 Crs
1.000 UP
2.000 UL
LT3
LTb
2612 6358 M
[ [(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 5.5, [111])]
] -46.7 MRshow
LT3
2732 6358 M
543 0 V
1140 5424 M
206 -5 V
205 -16 V
206 -25 V
205 -31 V
206 -35 V
205 -33 V
206 -26 V
205 -14 V
206 7 V
205 34 V
206 73 V
205 120 V
206 179 V
206 250 V
205 334 V
206 433 V
109 291 V
1140 5424 Star
1346 5419 Star
1551 5403 Star
1757 5378 Star
1962 5347 Star
2168 5312 Star
2373 5279 Star
2579 5253 Star
2784 5239 Star
2990 5246 Star
3195 5280 Star
3401 5353 Star
3606 5473 Star
3812 5652 Star
4018 5902 Star
4223 6236 Star
4429 6669 Star
3003 6358 Star
1.000 UP
2.000 UL
LT2
LTb
2612 6158 M
[ [(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 4.0, [001])]
] -46.7 MRshow
LT2
2732 6158 M
543 0 V
1140 5424 M
119 -3 V
118 -10 V
119 -17 V
119 -22 V
118 -28 V
119 -33 V
119 -37 V
118 -40 V
119 -42 V
119 -42 V
118 -42 V
119 -39 V
119 -36 V
118 -30 V
119 -21 V
119 -12 V
118 1 V
119 15 V
119 33 V
118 53 V
119 76 V
119 103 V
118 131 V
119 165 V
119 200 V
118 240 V
119 284 V
119 332 V
110 357 V
1140 5424 Pls
1259 5421 Pls
1377 5411 Pls
1496 5394 Pls
1615 5372 Pls
1733 5344 Pls
1852 5311 Pls
1971 5274 Pls
2089 5234 Pls
2208 5192 Pls
2327 5150 Pls
2445 5108 Pls
2564 5069 Pls
2683 5033 Pls
2801 5003 Pls
2920 4982 Pls
3039 4970 Pls
3157 4971 Pls
3276 4986 Pls
3395 5019 Pls
3513 5072 Pls
3632 5148 Pls
3751 5251 Pls
3869 5382 Pls
3988 5547 Pls
4107 5747 Pls
4225 5987 Pls
4344 6271 Pls
4463 6603 Pls
3003 6158 Pls
1.000 UP
2.000 UL
LT2
LTb
2612 5958 M
[ [(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 4.0, [110])]
] -46.7 MRshow
LT2
2732 5958 M
543 0 V
1140 5424 M
168 -7 V
168 -20 V
167 -32 V
168 -44 V
168 -53 V
168 -61 V
168 -65 V
168 -68 V
167 -66 V
168 -60 V
168 -50 V
168 -35 V
168 -14 V
167 12 V
168 45 V
168 85 V
168 132 V
168 186 V
168 250 V
167 321 V
168 403 V
36 105 V
1140 5424 Crs
1308 5417 Crs
1476 5397 Crs
1643 5365 Crs
1811 5321 Crs
1979 5268 Crs
2147 5207 Crs
2315 5142 Crs
2483 5074 Crs
2650 5008 Crs
2818 4948 Crs
2986 4898 Crs
3154 4863 Crs
3322 4849 Crs
3489 4861 Crs
3657 4906 Crs
3825 4991 Crs
3993 5123 Crs
4161 5309 Crs
4329 5559 Crs
4496 5880 Crs
4664 6283 Crs
3003 5958 Crs
1.000 UP
2.000 UL
LT2
LTb
2612 5758 M
[ [(Symbol) 200.0 0.0 true true 0 (k)]
[(Times-Roman) 160.0 -60.0 true true 0 (2)]
[(Times-Roman) 200.0 0.0 true true 0 ( = 4.0, [111])]
] -46.7 MRshow
LT2
2732 5758 M
543 0 V
1140 5424 M
206 -10 V
205 -30 V
206 -48 V
205 -63 V
206 -76 V
205 -84 V
206 -86 V
205 -83 V
206 -72 V
205 -53 V
206 -24 V
205 14 V
206 63 V
206 126 V
205 200 V
206 290 V
205 393 V
66 164 V
1140 5424 Star
1346 5414 Star
1551 5384 Star
1757 5336 Star
1962 5273 Star
2168 5197 Star
2373 5113 Star
2579 5027 Star
2784 4944 Star
2990 4872 Star
3195 4819 Star
3401 4795 Star
3606 4809 Star
3812 4872 Star
4018 4998 Star
4223 5198 Star
4429 5488 Star
4634 5881 Star
3003 5758 Star
1.000 UL
LTb
1140 6960 N
0 -2560 V
3560 0 V
0 2560 V
-3560 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Times-Italic Times-Roman
%%Pages: 1
