= Test feram automatically
== How to make check:
 app2      X5650$ taskset -c 6-11 make check
 super3t SR16000$ MALLOCMULTIHEAP=true XLSMPOPTS="spins=0:yields=0:parthds=32:stride=2:startproc=0" make check
 with numactl(8)$ numactl --cpunodebind=0 make check

== Timing results
Results of `grep TIMING *.log`
Note that, with a 64x64x64 supercell, use of single chip is
much more efficient than use of two chips under Sandy Bridge-,
Ivy Bridge-, Haswell- Broadwell-based Xeon.

elastocaloric770K_check.sh consumes only 0.25 GB.

=== feram-0.22.05
==== elastocaloric770K_check.vs.log
 X5650 1 chip =  6 core:       3.73        2114.44        2118.17    6     #TIMING_REPORT
 X5650 2 chip = 12 core:       3.86        1159.24        1163.10   12     #TIMING_REPORT
 SR16000  8 thds on 1/4 node:  2.98         994.32         997.30    8     #TIMING_REPORT
 SR16000 32 thds on  1  node:  3.12         363.08         366.20   32     #TIMING_REPORT
==== elastocaloric770K_check.lf.log
 X5650 1 chip =  6 core:       3.40        2106.04        2109.44    6     #TIMING_REPORT
 X5650 2 chip = 12 core:       3.41        1143.05        1146.46   12     #TIMING_REPORT
 SR16000  8 thds on 1/4 node:  2.74        1005.32        1008.06    8     #TIMING_REPORT
 SR16000 32 thds on  1  node:  2.76         363.94         366.70   32     #TIMING_REPORT

=== feram-0.22.06
==== elastocaloric770K_check.vs.log
 X5650 1 chip =  6 core:       3.76        2150.98        2154.74    6     #TIMING_REPORT
 X5650 2 chip = 12 core:       3.91        1170.36        1174.27   12     #TIMING_REPORT
 SR16000  8 thds on 1/4 node:  2.97         944.31         947.28    8     #TIMING_REPORT
 SR16000 32 thds on 1 node *1: 3.13         352.74         355.87   32     #TIMING_REPORT
 E5-2680 1 chip =  8 core *2:  3.04         985.11         988.15    8     #TIMING_REPORT
 E5-2680 2 chip = 16 core *2:  3.17        1106.52        1109.68   16     #TIMING_REPORT
==== elastocaloric770K_check.lf.log
 X5650 1 chip =  6 core:       3.40        2099.81        2103.21    6     #TIMING_REPORT
 X5650 2 chip = 12 core:       3.42        1149.46        1152.88   12     #TIMING_REPORT
 SR16000  8 thds on 1/4 node:  2.74         982.56         985.30    8     #TIMING_REPORT
 SR16000 32 thds on 1 node *1: 2.76         362.96         365.72   32     #TIMING_REPORT
 E5-2680 1 chip =  8 core *2:  2.76         977.17         979.92    8     #TIMING_REPORT
 E5-2680 2 chip = 16 core *2:  2.88         996.27         999.15   16     #TIMING_REPORT
*1: ~/f/feram/feram-0.22.06/SR16000-fftw_xlc_simd-super3t/src/ Faster than original FFTW3.
    ../configure FC=xlf90_r CPPFLAGS=-I/sysap/fftw_xlc_simd/include \
                             LDFLAGS=-L/sysap/fftw_xlc_simd/lib --with-lapack=essl
*2: ~/f/feram/feram-0.22.06/Linux-x86_64-gfortran-4.8.2-emerald/src/zzz-1chip/
    ../configure FCFLAGS='-g -Wall -Ofast -msse4.2 -pipe -fopenmp'

=== feram-0.23.00
==== elastocaloric770K_check.vs.log
 X5650 1 chip =  6 core:        7.02        2423.27        2430.28    6     #TIMING_REPORT
 X5650 2 chip = 12 core:        7.46        1300.21        1307.67   12     #TIMING_REPORT
 SR16000  8 thds on 1/4 node:   5.31         817.13         822.44    8     #TIMING_REPORT
 SR16000 32 thds on 1 node *1:  6.21         307.17         313.38   32     #TIMING_REPORT
 E5-2680 1 chip =  8 core *2:   5.40         997.37        1002.77    8     #TIMING_REPORT
 E5-2680 2 chip = 16 core *2:   5.90         969.28         975.18   16     #TIMING_REPORT
==== elastocaloric770K_check.lf.log
 X5650 1 chip =  6 core:        3.43        2371.53        2374.95    6     #TIMING_REPORT
 X5650 2 chip = 12 core:        3.43        1302.37        1305.79   12     #TIMING_REPORT      
 SR16000  8 thds on 1/4 node:   2.87         783.22         786.09    8     #TIMING_REPORT
 SR16000 32 thds on 1 node *1:  3.49         297.96         301.45   32     #TIMING_REPORT
 E5-2680 1 chip =  8 core *2:   2.76         993.22         995.97    8     #TIMING_REPORT
 E5-2680 2 chip = 16 core *2:   2.82         976.35         979.17   16     #TIMING_REPORT

*1: Single node of SR16000 can hit 285 sec, if padding_y = 5 is given. Check it:
    $ cd ~/f/loto/feram/branches/newplan/0.22.06-r2429-2015-04-14-newplan-xlf-padding_y_5/src/
    $ ls zzz0*/*digest
    $ grep TIMING zzz0*/*vs.log.digest
    $ grep TIMING zzz0*/*lf.log.digest
*2: ~/f/loto/feram/branches/newplan/0.22.06-r2440-2015-04-17-newplan-gfortran-4.8.2-emerald/src/
    ../configure FCFLAGS='-g -Wall -Ofast -msse4.2 -pipe -fopenmp'
