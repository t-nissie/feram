=begin

:title: feram: molecular dynamics simulator for bulk and thin-film ferroelectrics

feram is a molecular dynamics simulator for bulk and thin-film ferroelectrics.

Pronunciation of "feram": Ef-Ee-RaMu (i.e. FeRAM or Ferroelectrics and Relaxer Analyzing Machine)

:contents: 3

= Homepage and DOWNLOAD
feram's homepage is http://loto.sourceforge.net/feram/ .

You can download a tar ball of feram (feram-X.YY.ZZ.tar.gz) from
http://sourceforge.net/project/showfiles.php?group_id=204591&package_id=245013 .

= What is feram?
feram is a very fast molecular dynamics simulator for bulk and thin-film ferroelectrics
== Features and keywords
=== In Physics
* Ferroelectrics
* Relaxor
* Phase transition
* Thin film
* Electrodes
* Capacitor
* Nose-Poincare method
* Optical phonon
* Evaluate forces in reciprocal-space; k-locality of the force matrix
* Coarse-graining; reduction of the number of degree of freedom

=== Technically
* FFTW library version 3 http://www.fftw.org/
* Palatalized with OpenMP
* Object oriented programming (OOP) in Fortran 2003
* GNU autotools are used skillfully

== References
* R. D. King-Smith and David Vanderbilt: "First-principles investigation of ferroelectricity in perovskite compounds", Phys. Rev. B, vol.49, pp.5828-5844 (1994).
* Jaita Paul, Takeshi Nishimatsu, Yoshiyuki Kawazoe and Umesh V. Waghmare: "Ferroelectric Phase Transitions in Ultra-thin Films of BaTiO3", Phys. Rev. Lett., vol.99, p.077601 (2007).


= Install
== Requirements
* GNU make. You cannot use BSD make. http://www.gnu.org/software/make/
* FFTW3 library. http://www.fftw.org/
* Fortran 90 compiler
  * Intel Fortran Compiler for Linux (ifort, version 10.0.025 or higher) http://www.intel.com/cd/software/products/asmo-na/eng/compilers/flin/index.htm
  * gfortran (gcc-4.2.1 or higher) http://gcc.gnu.org/fortran/
  * Fortran 90 (xf90) for HITACHI SR11000 Series Super Technical Server http://www.hitachi.co.jp/Prod/comp/hpc/SR_e/11ktop_e.html

==  Notice on PGI Fortran
We found that feram compiled with PGI Fortran is slow.
PGI Fortran (pgf95, version 7.0 or higher) http://www.pgroup.com/

== Preferables
* gnuplot (version 4.2 or higher)
* Ruby (version 1.8.6 or higher)
* autoconf (version 2.59 or higher)
* automake (version 1.10 higher)

== Quick compilation
  $ tar zxf feram-X.YY.ZZ.tar.gz
  $ cd feram-X.YY.ZZ
  $ mkdir foo
  $ cd foo
  $ ../configure --help
  $ ../configure
  $ make
  $ cd examples/BaTiO3-bulk-16x16x16-local.field-new-format/
  $ OMP_NUM_THREADS=6 ../../src/feram T300 | tee T300.log        (example of prallel execution)
  $ ../../src/feram T300 | tee T300.log                          (example of serial execution)

== Available platforms and compilers
=== HITACHI SR11000 with xf90 (super1 in IMR)
feram runs on 1 node (16 CPUs) of SR11000 effectively.
  % tar zxf feram-X.YY.ZZ.tar.gz
  % cd feram-X.YY.ZZ
  % mkdir SR11000-xf90
  % cd SR11000-xf90
  % env FC=xf90 ../configure --host=SR11000
  % make
Becasue SR11000 and its Fortran compiler cannot treat command arguments,
you have to specify input file(s) in FILES file. For example,
 2
 cooling
 heating
1st line: number of input file(s). 2nd- line filename(s).

=== x86_64 Linux
On x86_64, i.e. AMD64 and Intel 64, feram may be compiled with gfortran,
Intel Fortran (ifort), and PGI Fortran (pgf95). For example,
  $ FC=gfortran ../configure
If FFTW3 was installed other than in /usr/lib and /usr/include or /usr/local/lib
and /usr/local/include, you have to specify the directories with LDFLAGS and CPPFLAGS
environment variables.
  $ FC=ifort LDFLAGS=-L/home/t-nissie/x86_64-Linux/lib CPPFLAGS=-I/home/t-nissie/x86_64-Linux/include ../configure

=== rupc05
  $ FC=pgf95 LDFLAGS=-L/home/takeshi/x86_64-Linux/fftw3-pgcc-pgcpp-pgf77/lib CPPFLAGS=-I/home/takeshi/x86_64-Linux/fftw3-pgcc-pgcpp-pgf77/include ../configure
  $ make
  $ cd examples/BaTiO3-bulk-16x16x16-local.field-new-format/
  $ OMP_NUM_THREADS=6 ../../pgf95/src/feram cooling > feram.log &

=== IA-64 Linux (appc in IMR)
On IA-64, feram may be compiled with gfortran or Intel Fortran (ifort). For example:
  % tar zxf feram-X.YY.ZZ.tar.gz
  % cd feram-X.YY.ZZ
  % mkdir appc-FFTW3/
  % cd appc-FFTW3/
  % env FC=ifort LDFLAGS=-L/home/t-nissie/ia64-Linux/lib CPPFLAGS=-I/home/t-nissie/ia64-Linux/include ../configure
  % cd src
  % make
  % cp ../../examples/BaTiO3-bulk-32x32x32-new-format/cooling .
  % ./feram cooling
  % env OMP_NUM_THREADS=2 ./feram cooling

=== x86 32-bit Linux
On x86 32-bit Linux, feram may be compiled with gfortran and Intel Fortran (ifort),
and PGI Fortran (pgf95).

= Execution
  $ feram input_file_1 input_file_2 ...
  $ feram < input_file

= Input files
== parameter file
The parameter file for feram is a text file consisting of
comment lines and 'tag = value(s)' lines. Filenames for
parameter files are arbitrary.

=== Comment
Lines beginning with '#' are ignored.
Blank lines are also ignored.
 # This is a comment line.


 # Here are two more
 # comment lines.

=== Tags
You must put ' = ', space-equal-space, between tag and value(s) as:
  tag = 1.0

  tag = -2.0 -3.0 -4.0
  tag =  5.0  6.0  7.0

Followings are currently available tags alphabetically ordered.

==== method
'md' for MD,
'lf' for leap frog (Not implemented yet),
'mc' for Monte Carlo (Not implemented yet).

  method = 'md'

==== GPa
Pressure in GPa unit.
  GPa = -5.0

==== kelvin_start, kelvin_goal, kelvin_step
  kelvin_start = 100
  kelvin_goal  = 500
  kelvin_step  =   5
or
  kelvin_start = 500
  kelvin_goal  = 100
  kelvin_step  =  -5

==== Q_Nose
Q_Nose for Nose-Poincare thermostat.
  Q_Nose = 14.4

==== bulk_or_film
Specifies the structure of the system.
'bulk' for infinitely periodic bulk
'film' for free standing thin film.
'epit' for epitaxially strained thin film.
  bulk_or_film = 'epit'

==== L
System size.
  L = 16 16 10

==== gap
Gap for the thin film.
  gap = 1

==== a0
Lattice constant for the perovskite ferroelectrics in Angstrom unit.
  a0 = 3.99

==== epi_strain
  epi_strain = -0.01

==== dt
Time step in pico second.
  dt = 0.002

==== n_thermalize, n_average, n_coord_freq
The number of time steps of thermalizing, averaging, and frequency
of taking snapshots. If n_thermalize+n_average=n_coord_freq, a
snapshot is taken at the end of the MD at each temperature.
  n_thermalize = 40000
  n_average    = 10000
  n_coord_freq = 50000

==== n_external_E_switch_on
At n_external_E_switch_on-th time-step, the external electric field is switched on.
  n_thermalize           = 50000
  n_average              = 10000
  n_coord_freq           = 20000
  n_external_E_switch_on = 30000

==== external_E_field
Vector of the external electric field in the unit of [V/Angstrom].
  external_E_field = 0.00 0.00 -0.01

==== external_E_field_frequency
Frequency of external electric field.
If it is zero, the constant electric field will be applied.
(f>0.0 is not implemented yet.)
  external_E_field_frequency = 0.0



==== P_kappa2, P_alpha, P_gamma
Coefficients for the 4-th order polynomial.
  P_kappa2 =    5.502  [eV/Angstrom^2] # P_4(u) = kappa2*u^2 + alpha*u^4
  P_alpha  =  110.4    [eV/Angstrom^4] #  + gamma*(u_y*u_z+u_z*u_x+u_x*u_y),
  P_gamma  = -163.1    [eV/Angstrom^4] # where u^2 = u_x^2 + u_y^2 + u_z^2

==== j
Short-range inter-site interaction coefficients
  j = -2.648 3.894 0.898 -0.789 0.562 0.358 0.179    j(i) [eV/Angstrom^2]

==== B11, B12, B44
Elastic Constants
  B11 = 126.
  B12 =  44.9
  B44 =  50.3  [eV]

==== B1xx, B1yy, B4yz
Elastic Coupling
  B1xx = -211.   [eV/Angstrom^2]
  B1yy =  -19.3  [eV/Angstrom^2]
  B4yz =   -7.75 [eV/Angstrom^2]

==== init_dipo_avg, init_dipo_dev
Initial dipole settings
  init_dipo_avg = 0.00 0.00 0.00   [Angstrom]  # Average   of initial dipole displacements
  init_dipo_dev = 0.02 0.02 0.02   [Angstrom]  # Deviation of initial dipole displacements

==== Z_star
Effective charge per site.
  Z_star     = 9.956

==== epsilon_inf
  epsilon_inf   = 5.24

==== defect_position, defect_u
Position and u of a defect.
  defect_position = 16 16 16
  defect_u = 0.0 0.0 0.0

== ionic.configuration file
(Not implemented yet.)
This file is required for the calculation of the local field.

  0.0 0.0 0.0   +3.0
  0.5 0.0 0.0   -2.0
  0.0 0.5 0.0   -2.0
  0.0 0.0 0.5   -2.0
     :
     :
  position_x position_y position_z    effective_charge_of_the_ion
     :
     :

Position must be given in the unit of a0.


== local.field file
  0  0  0   0.1 -0.1 0.7
  1  0  0   0.1  0.1 0.7
  2  0  0   0.1  0.2 0.7
     :
     :
 position_x position_y position_z    E_local_x E_local_y E_local_z [V/Angstrom]
     :
     :
 Lx Ly Lz   0.1  0.2 0.7

If feram cannot find both ionic.configuration and local.field,
it will set local.field to ZERO.

= Output files
If you execute the feram like `feram cooling`,
filenames of output files are starting from 'cooling',
e.g. cooling.avg, cooling.320K0050000.coord,
cooling.dipole-dipole-long.dat, etc.

== STDOUT
To STDOUT, feram reports the energies of every iterations.
src/plot.gp can plot the energies:
 $ feram cooling > feram.log
 $ gnuplot plot.gp

== cooling.avg
Averages.

== cooling.tttKnnnnnnn.coord
Snapshot of dipoles at ttt Kelvin and nnnnnnn-th iteration.
This file can be visualized with slice.rb (Ruby script) and
cross-section-q.sh, cross-section-p.sh, and cross-section-dVddi.sh
(Bourne Shell scripts). cross-section-p.sh and cross-section-dVddi.sh
are symbolic links or copy of cross-section-q.sh.

== cooling.dipole-dipole-long+short.dat

== cooling.dipole-dipole-long.dat

== cooling.dipole-dipole-short.dat

== cooling.inhomo-K.dat

== local.field file
The calculated local field from the given ionic configuration (ionic.configuration
file) is stored in this file. This file will be reloaded in consequent temperature
calculations and the other calculations.

= Copying
== feram
Copyright (C) 2007 Takeshi Nishimatsu

feram is distributed in the hope that
it will be useful, but WITHOUT ANY WARRANTY.
You can copy, modify and redistribute feram,
but only under the conditions described in
the GNU General Public License (the "GPL").
For more detail, see COPYING.

The author is grateful if you would kindly refer the
name of this program and cite our articles,
[Phys. Rev. Lett., vol.99, p.077601 (2007)] and
[]
in your paper.

== BLAS and LAPACK
Files under the directory libblaslapack are coming from BLAS and LAPACK
packages http://www.netlib.org/lapack/. See libblaslapack/COPYING.

= Author
Takeshi Nishimatsu
(t-nissie{at}imr.tohoku.ac.jp or takeshi{at}physics.rutgers.edu)

=end
#
# for ulwmul2html.rb
#
require 'ulwmul2html'
u2h=Ulwmul2html.new()
u2h.subs_rules << [/(\S*\/?\.jpg)(\s|$)/,      '<img src="\1">\2']
u2h.subs_rules << [/(\S*\/?\.F)(\s|$)/,        '<a href="\1">\1</a>\2']
u2h.subs_rules << [/(\S*\/?\.pdf)(\s|$)/,      '<a href="\1">\1</a>\2']
u2h.subs_rules << [/(\S*\/?COPYING)(\s|$|\.)/, '<a href="\1">\1</a>\2']
u2h.subs_rules << [/(\S*\/?LICENSE)(\s|$|\.)/, '<a href="\1">\1</a>\2']
u2h.subs_rules << [/(INSTALL\S*)(\s|$)/,       '<a href="\1">\1</a>\2']
u2h.subs_rules << [/(examples\/\S*)(\s|$)/,    '<a href="\1">\1</a>\2']
u2h.parse(ARGF)
puts u2h.html

# Local variables:
#   mode: RD
#   compile-command: "ruby README README > README.html"
# End:
